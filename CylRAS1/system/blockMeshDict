/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
/*
scale 0.01

vertices
(
 	// pre-block
	(-35.0 -15.0  1.5)    //  0
	(-15.0 -15.0  1.5)    //  1
        (-15.0 -15.0 -1.5)    //  2
	(-35.0 -15.0 -1.5)    //  3
        
	(-35.0  15.0  1.5)    //  4
        (-15.0  15.0  1.5)    //  5
        (-15.0  15.0 -1.5)    //  6
        (-35.0  15.0 -1.5)    //  7

	// obstacle blocks
	( 15.0 -15.0  1.5)    //  8
	( 15.0 -15.0 -1.5)    //  9

	(-1.7677669529663687 -1.7677669529663687   1.5)	    //  10
	( 1.7677669529663687 -1.7677669529663687   1.5)     //  11
	( 1.7677669529663687 -1.7677669529663687  -1.5)     //  12
	(-1.7677669529663687 -1.7677669529663687  -1.5)     //  13
							
	(-1.7677669529663687  1.7677669529663687   1.5)     //  14
	(-1.7677669529663687  1.7677669529663687  -1.5)     //  15

	( 1.7677669529663687  1.7677669529663687   1.5)     //  16
	( 1.7677669529663687  1.7677669529663687  -1.5)     //  17

	( 15.0  15.0  1.5)    // 18 
	( 15.0  15.0 -1.5)    // 19  

  	// post-block
	( 75.0 -15.0  1.5)    // 20
        ( 75.0 -15.0 -1.5)    // 21
        ( 75.0  15.0  1.5)    // 22
        ( 75.0  15.0 -1.5)    // 23
);

blocks
(

        // pre-block
	hex ( 0  1  2  3  4  5  6  7) ( 60 1 90) simpleGrading (1 1 1)

	// obstacle blocks
	hex ( 1  8  9  2 10 11 12 13) ( 90 1 90) simpleGrading (1 1 1) //bottom
	hex ( 1 10 13  2  5 14 15  6) ( 90 1 90) simpleGrading (1 1 1) //left
	hex (14 16 17 15  5 18 19  6) ( 90 1 90) simpleGrading (1 1 1) //top
	hex (11  8  9 12 16 18 19 17) ( 90 1 90) simpleGrading (1 1 1) //right

	// post-block
	hex ( 8 20 21  9 18 22 23 19) (180 1 90) simpleGrading (1 1 1)
);

edges
(
 	arc 10 11 (   0 -2.5   1.5)
	arc 12 13 (   0 -2.5  -1.5)
	arc 14 10 (-2.5    0   1.5)
	arc 15 13 (-2.5    0  -1.5)
	arc 14 16 (   0  2.5   1.5)
	arc 15 17 (   0 -2.5  -1.5)
	arc 16 11 ( 2.5    0   1.5)
	arc 17 12 ( 2.5    0  -1.5)
);

	
boundary
(
 	inlet
	{
		type 	patch;
		faces
		(
		 	(0 4 7 3)
		);
	}

	outlet
        {
                type    patch;
                faces
                (
		 	(20 21 23 22)
                );
        }

	wall
        {
                type    wall;
                faces
                (
		 	( 4  5  6  7)
			( 5 18 19  6)
			(18 22 23 19)

			( 0  1  2  3)
			( 1  8  9  2)
			( 8 20 21  9)

                );
        }

	obstacle
        {
                type    wall;  
                faces
                (
		 	(10 11 12 13)
			(11 16 17 12)
			(14 16 17 15)
			(10 14 15 13)

                );
        }
	
	frontAndBack
        {
                type    patch;  
                faces
                (
			 ( 0  1   5   4)
			 ( 1 10  14   5)
			 (14 16  18   5)
			 (11  8  18  16)
			 ( 1  8  11  10)
			 ( 8 20  22  18)


			 ( 3  7   6   2)
                         ( 2  6  15  13)
                         (15  6  19  17)
                         (12 17  19   9)
                         ( 2 13  12   9)
                         ( 9 19  23  21)


                );
	}
);

mergePatchPairs
(
);
*/
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/*
 internal   cylinder    d = 1 m
 enviroment cylinder    D = 40 d
 enviroment cylinder    z = 2 d which is the thickness 

  */

scale 1;

vertices
(
    (  0.5  0    0)    // 0
    (  0    0.5  0)    // 1
    ( -0.5  0    0)    // 2
    (  0   -0.5  0)    // 3
    
    (  0.5  0    2)    // 4
    (  0    0.5  2)    // 5
    ( -0.5    0  2)    // 6
    (  0   -0.5  2)    // 7
    
    (  0    0    0)    // 8
    (  0    0    2)    // 9

    ( 20    0    0)    //10
    (  0   20    0)    //11
    (-20    0    0)    //12
    (  0  -20    0)    //13
    
    ( 20    0    2)    //14
    (  0   20    2)    //15
    (-20    0    2)    //16
    (  0  -20    2)    //17


);

blocks
(
    hex (0 10 11 1 4 14 15 5) (256 64 1) simpleGrading (200 1 1) 
    hex (1 11 12 2 5 15 16 6) (256 64 1) simpleGrading (200 1 1)
    hex (2 12 13 3 6 16 17 7) (256 64 1) simpleGrading (200 1 1)
    hex (3 13 10 0 7 17 14 4) (256 64 1) simpleGrading (200 1 1)
);

edges
(
    arc  0  1 (  0.35355   0.35355 0) //(cx + r*cos45 cy + r*sin45 0) bottom arc
    arc  1  2 ( -0.35355   0.35355 0)
    arc  2  3 ( -0.35355  -0.35355 0)    
    arc  3  0 (  0.35355  -0.35355 0)   
    
    arc  4  5 (  0.35355   0.35355 2) //(cx + r*cos45 cy + r*sin45 0) top
    arc  5  6 ( -0.35355   0.35355 2)
    arc  6  7 ( -0.35355  -0.35355 2)
    arc  7  4 (  0.35355  -0.35355 2)

    arc 10 11 (  14.1421   14.1421 0) 
    arc 11 12 ( -14.1421   14.1421 0)
    arc 12 13 ( -14.1421  -14.1421 0) 
    arc 13 10 (  14.1421  -14.1421 0)

    arc 14 15 (  14.1421   14.1421 2) 
    arc 15 16 ( -14.1421   14.1421 2)
    arc 16 17 ( -14.1421  -14.1421 2)
    arc 17 14 (  14.1421  -14.1421 2)


);

boundary
(
    sides
    {
        type empty;
        faces
        (
            (10  0  1 11)  // A
            (11  1  2 12)  // B
            (12  2  3 13)  // C
            (13  3  0 10)  // D

	    (15  5  4 14)
            (16  6  5 15)
            (17  7  6 16)
            (14  4  7 17)
        );
    }
    walls
    {
        type wall;
        faces
        (
         
	    ( 0  1  5  4)
            ( 1  2  5  6)
            ( 2  3  7  6)
            ( 3  0  4  7)

	);
    }
    atmosphere 
    {
        type  patch;
        faces
        (
            (10 11 15 14)
            (11 12 16 15)
            (12 13 17 16)
	    (13 10 14 17)

        );
    }

);

mergePatchPairs
(

);


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/*
scale   1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(19);
        points[0]  = point(0.5, 0, -0.5);
        points[1]  = point(1, 0, -0.5);
        points[2]  = point(2, 0, -0.5);
        points[3]  = point(2, 0.707107, -0.5);
        points[4]  = point(0.707107, 0.707107, -0.5);
        points[5]  = point(0.353553, 0.353553, -0.5);
        points[6]  = point(2, 2, -0.5);
        points[7]  = point(0.707107, 2, -0.5);
        points[8]  = point(0, 2, -0.5);
        points[9]  = point(0, 1, -0.5);
        points[10] = point(0, 0.5, -0.5);
        points[11] = point(-0.5, 0, -0.5);
        points[12] = point(-1, 0, -0.5);
        points[13] = point(-2, 0, -0.5);
        points[14] = point(-2, 0.707107, -0.5);
        points[15] = point(-0.707107, 0.707107, -0.5);
        points[16] = point(-0.353553, 0.353553, -0.5);
        points[17] = point(-2, 2, -0.5);
        points[18] = point(-0.707107, 2, -0.5);

        // Duplicate z points
        label sz = points.size();
        points.setSize(2*sz);
        for (label i = 0; i < sz; i++)
        {
            const point& pt = points[i];
            points[i+sz] = point(pt.x(), pt.y(), -pt.z());
        }

        os  << points;
    #};
};


blocks
(
    hex (5 4 9 10 24 23 28 29) (10 10 1) simpleGrading (1 1 1)
    hex (0 1 4 5 19 20 23 24) (10 10 1) simpleGrading (1 1 1)
    hex (1 2 3 4 20 21 22 23) (20 10 1) simpleGrading (1 1 1)
    hex (4 3 6 7 23 22 25 26) (20 20 1) simpleGrading (1 1 1)
    hex (9 4 7 8 28 23 26 27) (10 20 1) simpleGrading (1 1 1)
    hex (15 16 10 9 34 35 29 28) (10 10 1) simpleGrading (1 1 1)
    hex (12 11 16 15 31 30 35 34) (10 10 1) simpleGrading (1 1 1)
    hex (13 12 15 14 32 31 34 33) (20 10 1) simpleGrading (1 1 1)
    hex (14 15 18 17 33 34 37 36) (20 20 1) simpleGrading (1 1 1)
    hex (15 9 8 18 34 28 27 37) (10 20 1) simpleGrading (1 1 1)
);

edges
(
    arc 0 5 (0.469846 0.17101 -0.5)
    arc 5 10 (0.17101 0.469846 -0.5)
    arc 1 4 (0.939693 0.34202 -0.5)
    arc 4 9 (0.34202 0.939693 -0.5)
    arc 19 24 (0.469846 0.17101 0.5)
    arc 24 29 (0.17101 0.469846 0.5)
    arc 20 23 (0.939693 0.34202 0.5)
    arc 23 28 (0.34202 0.939693 0.5)
    arc 11 16 (-0.469846 0.17101 -0.5)
    arc 16 10 (-0.17101 0.469846 -0.5)
    arc 12 15 (-0.939693 0.34202 -0.5)
    arc 15 9 (-0.34202 0.939693 -0.5)
    arc 30 35 (-0.469846 0.17101 0.5)
    arc 35 29 (-0.17101 0.469846 0.5)
    arc 31 34 (-0.939693 0.34202 0.5)
    arc 34 28 (-0.34202 0.939693 0.5)
);

boundary
(
    down
    {
        type symmetryPlane;
        faces
        (
            (0 1 20 19)
            (1 2 21 20)
            (12 11 30 31)
            (13 12 31 32)
        );
    }
    right
    {
        type patch;
        faces
        (
            (2 3 22 21)
            (3 6 25 22)
        );
    }
    up
    {
        type symmetryPlane;
        faces
        (
            (7 8 27 26)
            (6 7 26 25)
            (8 18 37 27)
            (18 17 36 37)
        );
    }
    left
    {
        type patch;
        faces
        (
            (14 13 32 33)
            (17 14 33 36)
        );
    }
    cylinder
    {
        type symmetry;
        faces
        (
            (10 5 24 29)
            (5 0 19 24)
            (16 10 29 35)
            (11 16 35 30)
        );
    }
);

mergePatchPairs
(

);
*/
// ***************************************************************************************
